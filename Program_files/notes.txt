//width of 2d array = 5
int i;
for(i=0; i<20; i++)
{
    printf("for i %d,\n", i);
    printf("x = %d,\n", i/5);
    printf("y = %d,\n\n", i%5);
}



if(rand()%100==0)
{
int z;
for(z=0; z<NODE_TOTAL_ELEMENTS; z++)
{
    printf("%d ",element[z]);
}
printf("\n");
}


////////////////////////////////
    Agent* agent = space;
    Node* node;
    BASE_TYPE* element;

element = agent;
printf("%d\n", element[1]);
//////////////////////////////////

printf("%d", TOTAL_BASE_UNITS);


//set node
element[base+l] = rand()%(AGENT_NON_NEURON_NODES-AGENT_NUMBER_OF_SENSORS+
                          numberOfNeurons)+(AGENT_NUMBER_OF_SENSORS);

printf("%d\n",rand()%3+5); //range (inclusive of 0, i.e 3 = 0-2, + (dig to start at) 1 = 1-3

printf("%d",rand()%3+5);

void programSpaceInit(ProgramSpace *space)
{
    Community* community = space;
    Agent* agent;
    Node* node;
    BASE_TYPE* element;

    int i,j,k,l;

    for(i=0; i<PROGRAM_SPACE_NUMBER_OF_COMMUNITIES; i++)
    {
        agent = &community[i];
        for(j=0; j<COMMUNITY_NUMBER_OF_AGENTS; j++)
        {
            node = &agent[j];
            for(k=0; k<AGENT_NUMBER_OF_NODES; k++)
            {
                element = &node[k];
                for(l=0; l<NODE_TOTAL_ELEMENTS; l++)
                {
                    element[l] = NODE_NULL;
                }
            }
        }
    }
}



typedef int double_int[2];
typedef int four_int[4];
typedef int eight_int[8];


    int myArray[10] = {1,2,3,4,5,6,7,8,9,10};

    double_int* big = &myArray[0];
    four_int* bigger = &myArray[0];
    eight_int* biggest = &myArray[0];

    int* little_within_big = &bigger[2];

    printf("big: %d\n", *big[1]);//3
    printf("bigger: %d\n", *bigger[2]);//9
    printf("bigger: %d\n", *biggest[1]);//9
    printf("little_within_big: %d\n", little_within_big[1]);//10

    return 0;













//    ///find first highest value
//
//
//
//
//
//    highScore = -1;
//    for(k = 0; k < COMMUNITY_NUMBER_OF_AGENTS; k++)
//    {
//        int thisIndex = COMMUNITY_NUMBER_OF_AGENTS * i + k;
////printf("%d\n", agentArray[thisIndex].points);
//printf("%d\n", previousHighScore);
////printf("flag");
//        if((agentArray[thisIndex].points > highScore)
//           &&(agentArray[thisIndex].points <= previousHighScore))
//        {
//
//
//
//            if((agentArray[thisIndex].points!=previousHighScore)||
//               ((agentArray[thisIndex].points==previousHighScore)&&
//                (thisIndex > previousHighIndex)))
//            {
//                highScore = agentArray[thisIndex].points;
//                highIndex = thisIndex;
////printf("%d\n", agentArray[thisIndex].points);
//            }
//        }
//    }
//    previousHighScore = highScore;
//    previousHighIndex = highIndex;
//    highScoringAgentsIndex[j] = highIndex;
//}



//        //find most successful agent's
//        for(j = 0; j < NUMBER_OF_AGENTS_TO_REPRODUCE; j++)
//        {
//            highScore = -1;
//            for(k = 0; k < COMMUNITY_NUMBER_OF_AGENTS; k++)
//            {
//                int thisIndex = COMMUNITY_NUMBER_OF_AGENTS * i + k;
////printf("%d\n", agentArray[thisIndex].points);
//printf("%d\n", previousHighScore);
////printf("flag");
//                if((agentArray[thisIndex].points > highScore)
//                   &&(agentArray[thisIndex].points <= previousHighScore))
//                {
//
//
//
//                    if((agentArray[thisIndex].points!=previousHighScore)||
//                       ((agentArray[thisIndex].points==previousHighScore)&&
//                        (thisIndex > previousHighIndex)))
//                    {
//                        highScore = agentArray[thisIndex].points;
//                        highIndex = thisIndex;
////printf("%d\n", agentArray[thisIndex].points);
//                    }
//                }
//            }
//            previousHighScore = highScore;
//            previousHighIndex = highIndex;
//            highScoringAgentsIndex[j] = highIndex;
//        }
